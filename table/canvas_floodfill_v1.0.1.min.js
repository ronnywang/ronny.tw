/**
 * Floodfill - Linear Floodfill with tolerance in plain Javascript.
 * 
 * Autor: Markus Ritberger
 * Version: 1.0.1 (2012-04-16)
 *      
 * Examples at: http://demos.ritberger.at/floodfill
 * 
 * licensed under MIT license:
 * 
 * Copyright (c) 2012 Markus Ritberger
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to 
 * deal in the Software without restriction, including without limitation the 
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or 
 * sell copies of the Software, and to permit persons to whom the Software is 
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
 * THE SOFTWARE.
 **/
function floodFill(a,b,c,d,e){pixelStack=[[a,b]];width=c.canvas.width;height=c.canvas.height;pixelPos=(b*width+a)*4;imageData=c.getImageData(0,0,width,height);startR=imageData.data[pixelPos];startG=imageData.data[pixelPos+1];startB=imageData.data[pixelPos+2];while(pixelStack.length){newPos=pixelStack.pop();a=newPos[0];b=newPos[1];pixelPos=(b*width+a)*4;while(b-->=0&&floodfill_matchTolerance(pixelPos,d,e)){pixelPos-=width*4}pixelPos+=width*4;++b;reachLeft=false;reachRight=false;while(b++<height-1&&floodfill_matchTolerance(pixelPos,d,e)){floodfill_colorPixel(pixelPos,d);if(a>0){if(floodfill_matchTolerance(pixelPos-4,d,e)){if(!reachLeft){pixelStack.push([a-1,b]);reachLeft=true}}else if(reachLeft){reachLeft=false}}if(a<width-1){if(floodfill_matchTolerance(pixelPos+4,d,e)){if(!reachRight){pixelStack.push([a+1,b]);reachRight=true}}else if(floodfill_matchTolerance(pixelPos+4-width*4,d,e)){if(!reachLeft){pixelStack.push([a+1,b-1]);reachLeft=true}}else if(reachRight){reachRight=false}}pixelPos+=width*4}}c.putImageData(imageData,0,0)}function floodfill_colorPixel(a,b){imageData.data[a]=floodfill_hexToR(b);imageData.data[a+1]=floodfill_hexToG(b);imageData.data[a+2]=floodfill_hexToB(b);imageData.data[a+3]=255}function floodfill_matchTolerance(a,b,c){var d=startR+startR*(c/100);var e=startG+startG*(c/100);var f=startB+startB*(c/100);var g=startR-startR*(c/100);var h=startG-startG*(c/100);var i=startB-startB*(c/100);var j=imageData.data[a];var k=imageData.data[a+1];var l=imageData.data[a+2];return j>=g&&j<=d&&k>=h&&k<=e&&l>=i&&l<=f&&!(j==floodfill_hexToR(b)&&k==floodfill_hexToG(b)&&l==floodfill_hexToB(b))}function floodfill_cutHex(a){return a.charAt(0)=="#"?a.substring(1,7):a}function floodfill_hexToB(a){return parseInt(floodfill_cutHex(a).substring(4,6),16)}function floodfill_hexToG(a){return parseInt(floodfill_cutHex(a).substring(2,4),16)}function floodfill_hexToR(a){return parseInt(floodfill_cutHex(a).substring(0,2),16)}